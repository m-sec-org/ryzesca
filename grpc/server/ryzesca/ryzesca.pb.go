// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0--rc2
// source: ryzesca.proto

package ryzesca

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RyzescaParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScancodeJsonpath  string `protobuf:"bytes,1,opt,name=scancode_jsonpath,json=scancodeJsonpath,proto3" json:"scancode_jsonpath,omitempty"`
	ScancodeJson      string `protobuf:"bytes,2,opt,name=scancode_json,json=scancodeJson,proto3" json:"scancode_json,omitempty"`
	Processes         int32  `protobuf:"varint,3,opt,name=processes,proto3" json:"processes,omitempty"`
	Timeout           int32  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	MaxInMemory       int32  `protobuf:"varint,5,opt,name=max_in_memory,json=maxInMemory,proto3" json:"max_in_memory,omitempty"`
	IdentifierPackage bool   `protobuf:"varint,6,opt,name=identifier_package,json=identifierPackage,proto3" json:"identifier_package,omitempty"`
	FindingPackageVul bool   `protobuf:"varint,7,opt,name=finding_package_vul,json=findingPackageVul,proto3" json:"finding_package_vul,omitempty"`
	SimplePackageVul  bool   `protobuf:"varint,8,opt,name=simple_package_vul,json=simplePackageVul,proto3" json:"simple_package_vul,omitempty"`
	FindingSummary    bool   `protobuf:"varint,9,opt,name=finding_summary,json=findingSummary,proto3" json:"finding_summary,omitempty"`
	OnlyJsonSummary   bool   `protobuf:"varint,10,opt,name=only_json_summary,json=onlyJsonSummary,proto3" json:"only_json_summary,omitempty"`
	OutputJsonpath    string `protobuf:"bytes,11,opt,name=output_jsonpath,json=outputJsonpath,proto3" json:"output_jsonpath,omitempty"`
	OnlyFindings      bool   `protobuf:"varint,12,opt,name=only_findings,json=onlyFindings,proto3" json:"only_findings,omitempty"`
	TaskId            string `protobuf:"bytes,13,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	CyclonedxJson     string `protobuf:"bytes,14,opt,name=cyclonedx_json,json=cyclonedxJson,proto3" json:"cyclonedx_json,omitempty"`
	CyclonedxJsonpath string `protobuf:"bytes,15,opt,name=cyclonedx_jsonpath,json=cyclonedxJsonpath,proto3" json:"cyclonedx_jsonpath,omitempty"`
}

func (x *RyzescaParams) Reset() {
	*x = RyzescaParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ryzesca_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RyzescaParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RyzescaParams) ProtoMessage() {}

func (x *RyzescaParams) ProtoReflect() protoreflect.Message {
	mi := &file_ryzesca_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RyzescaParams.ProtoReflect.Descriptor instead.
func (*RyzescaParams) Descriptor() ([]byte, []int) {
	return file_ryzesca_proto_rawDescGZIP(), []int{0}
}

func (x *RyzescaParams) GetScancodeJsonpath() string {
	if x != nil {
		return x.ScancodeJsonpath
	}
	return ""
}

func (x *RyzescaParams) GetScancodeJson() string {
	if x != nil {
		return x.ScancodeJson
	}
	return ""
}

func (x *RyzescaParams) GetProcesses() int32 {
	if x != nil {
		return x.Processes
	}
	return 0
}

func (x *RyzescaParams) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RyzescaParams) GetMaxInMemory() int32 {
	if x != nil {
		return x.MaxInMemory
	}
	return 0
}

func (x *RyzescaParams) GetIdentifierPackage() bool {
	if x != nil {
		return x.IdentifierPackage
	}
	return false
}

func (x *RyzescaParams) GetFindingPackageVul() bool {
	if x != nil {
		return x.FindingPackageVul
	}
	return false
}

func (x *RyzescaParams) GetSimplePackageVul() bool {
	if x != nil {
		return x.SimplePackageVul
	}
	return false
}

func (x *RyzescaParams) GetFindingSummary() bool {
	if x != nil {
		return x.FindingSummary
	}
	return false
}

func (x *RyzescaParams) GetOnlyJsonSummary() bool {
	if x != nil {
		return x.OnlyJsonSummary
	}
	return false
}

func (x *RyzescaParams) GetOutputJsonpath() string {
	if x != nil {
		return x.OutputJsonpath
	}
	return ""
}

func (x *RyzescaParams) GetOnlyFindings() bool {
	if x != nil {
		return x.OnlyFindings
	}
	return false
}

func (x *RyzescaParams) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RyzescaParams) GetCyclonedxJson() string {
	if x != nil {
		return x.CyclonedxJson
	}
	return ""
}

func (x *RyzescaParams) GetCyclonedxJsonpath() string {
	if x != nil {
		return x.CyclonedxJsonpath
	}
	return ""
}

type RyzescaResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers *Header `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Files   *File   `protobuf:"bytes,2,opt,name=files,proto3" json:"files,omitempty"`
}

func (x *RyzescaResult) Reset() {
	*x = RyzescaResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ryzesca_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RyzescaResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RyzescaResult) ProtoMessage() {}

func (x *RyzescaResult) ProtoReflect() protoreflect.Message {
	mi := &file_ryzesca_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RyzescaResult.ProtoReflect.Descriptor instead.
func (*RyzescaResult) Descriptor() ([]byte, []int) {
	return file_ryzesca_proto_rawDescGZIP(), []int{1}
}

func (x *RyzescaResult) GetHeaders() *Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RyzescaResult) GetFiles() *File {
	if x != nil {
		return x.Files
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolName       string                     `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`
	ToolVersion    string                     `protobuf:"bytes,2,opt,name=tool_version,json=toolVersion,proto3" json:"tool_version,omitempty"`
	StartTimestamp string                     `protobuf:"bytes,3,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   string                     `protobuf:"bytes,4,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	Duration       float64                    `protobuf:"fixed64,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Message        string                     `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Errors         []string                   `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	ExtraData      map[string]*structpb.Value `protobuf:"bytes,8,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ryzesca_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_ryzesca_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_ryzesca_proto_rawDescGZIP(), []int{2}
}

func (x *Header) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *Header) GetToolVersion() string {
	if x != nil {
		return x.ToolVersion
	}
	return ""
}

func (x *Header) GetStartTimestamp() string {
	if x != nil {
		return x.StartTimestamp
	}
	return ""
}

func (x *Header) GetEndTimestamp() string {
	if x != nil {
		return x.EndTimestamp
	}
	return ""
}

func (x *Header) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Header) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Header) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Header) GetExtraData() map[string]*structpb.Value {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string          `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Namespace       string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name            string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version         string          `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	DeclaredLicense *structpb.Value `protobuf:"bytes,5,opt,name=declared_license,json=declaredLicense,proto3" json:"declared_license,omitempty"`
	Purl            string          `protobuf:"bytes,6,opt,name=purl,proto3" json:"purl,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ryzesca_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_ryzesca_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_ryzesca_proto_rawDescGZIP(), []int{3}
}

func (x *Package) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Package) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Package) GetDeclaredLicense() *structpb.Value {
	if x != nil {
		return x.DeclaredLicense
	}
	return nil
}

func (x *Package) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

type PackageVulerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName           string   `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion        string   `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	Purl                  string   `protobuf:"bytes,3,opt,name=purl,proto3" json:"purl,omitempty"`
	PackageIdentifiers    []string `protobuf:"bytes,4,rep,name=package_identifiers,json=packageIdentifiers,proto3" json:"package_identifiers,omitempty"`
	VulnerableIdentifiers []string `protobuf:"bytes,5,rep,name=vulnerable_identifiers,json=vulnerableIdentifiers,proto3" json:"vulnerable_identifiers,omitempty"`
	VulnerableVersions    []string `protobuf:"bytes,6,rep,name=vulnerable_versions,json=vulnerableVersions,proto3" json:"vulnerable_versions,omitempty"`
	RiskLevel             int32    `protobuf:"varint,8,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	// TODO 对应cve_infos 数据库
	CveVulInfos []*CVEInfo `protobuf:"bytes,7,rep,name=cve_vul_infos,json=cveVulInfos,proto3" json:"cve_vul_infos,omitempty"`
}

func (x *PackageVulerability) Reset() {
	*x = PackageVulerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ryzesca_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageVulerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageVulerability) ProtoMessage() {}

func (x *PackageVulerability) ProtoReflect() protoreflect.Message {
	mi := &file_ryzesca_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageVulerability.ProtoReflect.Descriptor instead.
func (*PackageVulerability) Descriptor() ([]byte, []int) {
	return file_ryzesca_proto_rawDescGZIP(), []int{4}
}

func (x *PackageVulerability) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *PackageVulerability) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *PackageVulerability) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *PackageVulerability) GetPackageIdentifiers() []string {
	if x != nil {
		return x.PackageIdentifiers
	}
	return nil
}

func (x *PackageVulerability) GetVulnerableIdentifiers() []string {
	if x != nil {
		return x.VulnerableIdentifiers
	}
	return nil
}

func (x *PackageVulerability) GetVulnerableVersions() []string {
	if x != nil {
		return x.VulnerableVersions
	}
	return nil
}

func (x *PackageVulerability) GetRiskLevel() int32 {
	if x != nil {
		return x.RiskLevel
	}
	return 0
}

func (x *PackageVulerability) GetCveVulInfos() []*CVEInfo {
	if x != nil {
		return x.CveVulInfos
	}
	return nil
}

type CVEInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO 对应cve_infos 数据库
	NssvdId          string                     `protobuf:"bytes,1,opt,name=nssvd_id,json=nssvdId,proto3" json:"nssvd_id,omitempty"`
	CveId            string                     `protobuf:"bytes,2,opt,name=cve_id,json=cveId,proto3" json:"cve_id,omitempty"`
	CnnvdId          string                     `protobuf:"bytes,3,opt,name=cnnvd_id,json=cnnvdId,proto3" json:"cnnvd_id,omitempty"`
	CnnvdName        string                     `protobuf:"bytes,4,opt,name=cnnvd_name,json=cnnvdName,proto3" json:"cnnvd_name,omitempty"`
	CnvdId           string                     `protobuf:"bytes,20,opt,name=cnvd_id,json=cnvdId,proto3" json:"cnvd_id,omitempty"`
	CnvdName         string                     `protobuf:"bytes,21,opt,name=cnvd_name,json=cnvdName,proto3" json:"cnvd_name,omitempty"`
	DescriptionEn    string                     `protobuf:"bytes,5,opt,name=description_en,json=descriptionEn,proto3" json:"description_en,omitempty"`
	DescriptionZh    string                     `protobuf:"bytes,6,opt,name=description_zh,json=descriptionZh,proto3" json:"description_zh,omitempty"`
	SolutionEn       string                     `protobuf:"bytes,7,opt,name=solution_en,json=solutionEn,proto3" json:"solution_en,omitempty"`
	SolutionZh       string                     `protobuf:"bytes,8,opt,name=solution_zh,json=solutionZh,proto3" json:"solution_zh,omitempty"`
	PublishedDate    string                     `protobuf:"bytes,9,opt,name=published_date,json=publishedDate,proto3" json:"published_date,omitempty"`
	LastModifiedDate string                     `protobuf:"bytes,10,opt,name=last_modified_date,json=lastModifiedDate,proto3" json:"last_modified_date,omitempty"`
	CweIds           *CVEInfo_CWE               `protobuf:"bytes,11,opt,name=cwe_ids,json=cweIds,proto3" json:"cwe_ids,omitempty"`
	Identifier       string                     `protobuf:"bytes,12,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Version          string                     `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	Confidence       string                     `protobuf:"bytes,14,opt,name=confidence,proto3" json:"confidence,omitempty"`
	CveReferences    []*CVEInfo_CVEReference    `protobuf:"bytes,15,rep,name=cve_references,json=cveReferences,proto3" json:"cve_references,omitempty"`
	CveMetric2       map[string]*structpb.Value `protobuf:"bytes,16,rep,name=cve_metric2,json=cveMetric2,proto3" json:"cve_metric2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CveMetric3       map[string]*structpb.Value `protobuf:"bytes,17,rep,name=cve_metric3,json=cveMetric3,proto3" json:"cve_metric3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CnnvdMetric      map[string]*structpb.Value `protobuf:"bytes,18,rep,name=cnnvd_metric,json=cnnvdMetric,proto3" json:"cnnvd_metric,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RiskLevel        int32                      `protobuf:"varint,19,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
}

func (x *CVEInfo) Reset() {
	*x = CVEInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ryzesca_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEInfo) ProtoMessage() {}

func (x *CVEInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ryzesca_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEInfo.ProtoReflect.Descriptor instead.
func (*CVEInfo) Descriptor() ([]byte, []int) {
	return file_ryzesca_proto_rawDescGZIP(), []int{5}
}

func (x *CVEInfo) GetNssvdId() string {
	if x != nil {
		return x.NssvdId
	}
	return ""
}

func (x *CVEInfo) GetCveId() string {
	if x != nil {
		return x.CveId
	}
	return ""
}

func (x *CVEInfo) GetCnnvdId() string {
	if x != nil {
		return x.CnnvdId
	}
	return ""
}

func (x *CVEInfo) GetCnnvdName() string {
	if x != nil {
		return x.CnnvdName
	}
	return ""
}

func (x *CVEInfo) GetCnvdId() string {
	if x != nil {
		return x.CnvdId
	}
	return ""
}

func (x *CVEInfo) GetCnvdName() string {
	if x != nil {
		return x.CnvdName
	}
	return ""
}

func (x *CVEInfo) GetDescriptionEn() string {
	if x != nil {
		return x.DescriptionEn
	}
	return ""
}

func (x *CVEInfo) GetDescriptionZh() string {
	if x != nil {
		return x.DescriptionZh
	}
	return ""
}

func (x *CVEInfo) GetSolutionEn() string {
	if x != nil {
		return x.SolutionEn
	}
	return ""
}

func (x *CVEInfo) GetSolutionZh() string {
	if x != nil {
		return x.SolutionZh
	}
	return ""
}

func (x *CVEInfo) GetPublishedDate() string {
	if x != nil {
		return x.PublishedDate
	}
	return ""
}

func (x *CVEInfo) GetLastModifiedDate() string {
	if x != nil {
		return x.LastModifiedDate
	}
	return ""
}

func (x *CVEInfo) GetCweIds() *CVEInfo_CWE {
	if x != nil {
		return x.CweIds
	}
	return nil
}

func (x *CVEInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *CVEInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CVEInfo) GetConfidence() string {
	if x != nil {
		return x.Confidence
	}
	return ""
}

func (x *CVEInfo) GetCveReferences() []*CVEInfo_CVEReference {
	if x != nil {
		return x.CveReferences
	}
	return nil
}

func (x *CVEInfo) GetCveMetric2() map[string]*structpb.Value {
	if x != nil {
		return x.CveMetric2
	}
	return nil
}

func (x *CVEInfo) GetCveMetric3() map[string]*structpb.Value {
	if x != nil {
		return x.CveMetric3
	}
	return nil
}

func (x *CVEInfo) GetCnnvdMetric() map[string]*structpb.Value {
	if x != nil {
		return x.CnnvdMetric
	}
	return nil
}

func (x *CVEInfo) GetRiskLevel() int32 {
	if x != nil {
		return x.RiskLevel
	}
	return 0
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                   string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type                   string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name                   string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	BaseName               string                 `protobuf:"bytes,4,opt,name=base_name,json=baseName,proto3" json:"base_name,omitempty"`
	Packages               []*Package             `protobuf:"bytes,5,rep,name=packages,proto3" json:"packages,omitempty"`
	PackageVulnerabilities []*PackageVulerability `protobuf:"bytes,6,rep,name=package_vulnerabilities,json=packageVulnerabilities,proto3" json:"package_vulnerabilities,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ryzesca_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_ryzesca_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_ryzesca_proto_rawDescGZIP(), []int{6}
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *File) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *File) GetPackageVulnerabilities() []*PackageVulerability {
	if x != nil {
		return x.PackageVulnerabilities
	}
	return nil
}

// TODO 对应cve_references 数据库
type CVEInfo_CVEReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Refsource string `protobuf:"bytes,3,opt,name=refsource,proto3" json:"refsource,omitempty"`
	Tags      string `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CVEInfo_CVEReference) Reset() {
	*x = CVEInfo_CVEReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ryzesca_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEInfo_CVEReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEInfo_CVEReference) ProtoMessage() {}

func (x *CVEInfo_CVEReference) ProtoReflect() protoreflect.Message {
	mi := &file_ryzesca_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEInfo_CVEReference.ProtoReflect.Descriptor instead.
func (*CVEInfo_CVEReference) Descriptor() ([]byte, []int) {
	return file_ryzesca_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CVEInfo_CVEReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CVEInfo_CVEReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CVEInfo_CVEReference) GetRefsource() string {
	if x != nil {
		return x.Refsource
	}
	return ""
}

func (x *CVEInfo_CVEReference) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

// TODO 对应cve_rela 数据库
type CVEInfo_CWE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CweId   string `protobuf:"bytes,1,opt,name=cwe_id,json=cweId,proto3" json:"cwe_id,omitempty"`
	CweName string `protobuf:"bytes,2,opt,name=cwe_name,json=cweName,proto3" json:"cwe_name,omitempty"`
}

func (x *CVEInfo_CWE) Reset() {
	*x = CVEInfo_CWE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ryzesca_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVEInfo_CWE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEInfo_CWE) ProtoMessage() {}

func (x *CVEInfo_CWE) ProtoReflect() protoreflect.Message {
	mi := &file_ryzesca_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEInfo_CWE.ProtoReflect.Descriptor instead.
func (*CVEInfo_CWE) Descriptor() ([]byte, []int) {
	return file_ryzesca_proto_rawDescGZIP(), []int{5, 1}
}

func (x *CVEInfo_CWE) GetCweId() string {
	if x != nil {
		return x.CweId
	}
	return ""
}

func (x *CVEInfo_CWE) GetCweName() string {
	if x != nil {
		return x.CweName
	}
	return ""
}

var File_ryzesca_proto protoreflect.FileDescriptor

var file_ryzesca_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x04, 0x0a, 0x0d, 0x52, 0x79, 0x7a, 0x65, 0x73,
	0x63, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x73, 0x6f,
	0x6e, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63,
	0x61, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x75, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x56, 0x75, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x75, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x56, 0x75, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x4a, 0x73, 0x6f,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x64, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x64, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x4a, 0x73, 0x6f,
	0x6e, 0x70, 0x61, 0x74, 0x68, 0x22, 0x5f, 0x0a, 0x0d, 0x52, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63,
	0x61, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x54, 0x0a, 0x0e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x75, 0x72, 0x6c, 0x22, 0xe3, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x56, 0x75, 0x6c, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x2f, 0x0a,
	0x13, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x35,
	0x0a, 0x16, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x76, 0x65, 0x5f, 0x76, 0x75, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x43, 0x56, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x63, 0x76, 0x65, 0x56, 0x75, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xf1, 0x09, 0x0a, 0x07,
	0x43, 0x56, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x73, 0x73, 0x76, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x73, 0x73, 0x76, 0x64,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x76, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6e, 0x6e,
	0x76, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6e, 0x6e,
	0x76, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6e, 0x6e, 0x76, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6e, 0x6e, 0x76, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6e, 0x76, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6e, 0x76, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6e, 0x76, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6e, 0x76, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x7a, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x07, 0x63, 0x77, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x43, 0x56, 0x45, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x57, 0x45, 0x52, 0x06, 0x63, 0x77, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x43, 0x56, 0x45, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x56, 0x45, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x63, 0x76, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a,
	0x0b, 0x63, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x32, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x43, 0x56, 0x45,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x32,
	0x12, 0x41, 0x0a, 0x0b, 0x63, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x33, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e,
	0x43, 0x56, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x33, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6e, 0x6e, 0x76, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x79, 0x7a, 0x65,
	0x73, 0x63, 0x61, 0x2e, 0x43, 0x56, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6e, 0x6e, 0x76,
	0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6e,
	0x6e, 0x76, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x66, 0x0a, 0x0c, 0x43, 0x56, 0x45, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0x37, 0x0a, 0x03, 0x43, 0x57, 0x45, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x77, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x77, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x77, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x77, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x55, 0x0a, 0x0f, 0x43, 0x76, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x55, 0x0a, 0x0f, 0x43, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x33, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x10, 0x43, 0x6e, 0x6e, 0x76, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe4, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x17, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x56, 0x75, 0x6c, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x16,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x32, 0x52, 0x0a, 0x07, 0x52, 0x79, 0x7a, 0x65, 0x73, 0x63,
	0x61, 0x12, 0x47, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x52, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x43,
	0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x44, 0x58, 0x12, 0x16, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73,
	0x63, 0x61, 0x2e, 0x52, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x16, 0x2e, 0x72, 0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x2e, 0x52, 0x79, 0x7a, 0x65, 0x73,
	0x63, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2f, 0x72,
	0x79, 0x7a, 0x65, 0x73, 0x63, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ryzesca_proto_rawDescOnce sync.Once
	file_ryzesca_proto_rawDescData = file_ryzesca_proto_rawDesc
)

func file_ryzesca_proto_rawDescGZIP() []byte {
	file_ryzesca_proto_rawDescOnce.Do(func() {
		file_ryzesca_proto_rawDescData = protoimpl.X.CompressGZIP(file_ryzesca_proto_rawDescData)
	})
	return file_ryzesca_proto_rawDescData
}

var file_ryzesca_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_ryzesca_proto_goTypes = []interface{}{
	(*RyzescaParams)(nil),        // 0: ryzesca.RyzescaParams
	(*RyzescaResult)(nil),        // 1: ryzesca.RyzescaResult
	(*Header)(nil),               // 2: ryzesca.Header
	(*Package)(nil),              // 3: ryzesca.Package
	(*PackageVulerability)(nil),  // 4: ryzesca.PackageVulerability
	(*CVEInfo)(nil),              // 5: ryzesca.CVEInfo
	(*File)(nil),                 // 6: ryzesca.File
	nil,                          // 7: ryzesca.Header.ExtraDataEntry
	(*CVEInfo_CVEReference)(nil), // 8: ryzesca.CVEInfo.CVEReference
	(*CVEInfo_CWE)(nil),          // 9: ryzesca.CVEInfo.CWE
	nil,                          // 10: ryzesca.CVEInfo.CveMetric2Entry
	nil,                          // 11: ryzesca.CVEInfo.CveMetric3Entry
	nil,                          // 12: ryzesca.CVEInfo.CnnvdMetricEntry
	(*structpb.Value)(nil),       // 13: google.protobuf.Value
}
var file_ryzesca_proto_depIdxs = []int32{
	2,  // 0: ryzesca.RyzescaResult.headers:type_name -> ryzesca.Header
	6,  // 1: ryzesca.RyzescaResult.files:type_name -> ryzesca.File
	7,  // 2: ryzesca.Header.extra_data:type_name -> ryzesca.Header.ExtraDataEntry
	13, // 3: ryzesca.Package.declared_license:type_name -> google.protobuf.Value
	5,  // 4: ryzesca.PackageVulerability.cve_vul_infos:type_name -> ryzesca.CVEInfo
	9,  // 5: ryzesca.CVEInfo.cwe_ids:type_name -> ryzesca.CVEInfo.CWE
	8,  // 6: ryzesca.CVEInfo.cve_references:type_name -> ryzesca.CVEInfo.CVEReference
	10, // 7: ryzesca.CVEInfo.cve_metric2:type_name -> ryzesca.CVEInfo.CveMetric2Entry
	11, // 8: ryzesca.CVEInfo.cve_metric3:type_name -> ryzesca.CVEInfo.CveMetric3Entry
	12, // 9: ryzesca.CVEInfo.cnnvd_metric:type_name -> ryzesca.CVEInfo.CnnvdMetricEntry
	3,  // 10: ryzesca.File.packages:type_name -> ryzesca.Package
	4,  // 11: ryzesca.File.package_vulnerabilities:type_name -> ryzesca.PackageVulerability
	13, // 12: ryzesca.Header.ExtraDataEntry.value:type_name -> google.protobuf.Value
	13, // 13: ryzesca.CVEInfo.CveMetric2Entry.value:type_name -> google.protobuf.Value
	13, // 14: ryzesca.CVEInfo.CveMetric3Entry.value:type_name -> google.protobuf.Value
	13, // 15: ryzesca.CVEInfo.CnnvdMetricEntry.value:type_name -> google.protobuf.Value
	0,  // 16: ryzesca.Ryzesca.RunRyzescaCycloneDX:input_type -> ryzesca.RyzescaParams
	1,  // 17: ryzesca.Ryzesca.RunRyzescaCycloneDX:output_type -> ryzesca.RyzescaResult
	17, // [17:18] is the sub-list for method output_type
	16, // [16:17] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ryzesca_proto_init() }
func file_ryzesca_proto_init() {
	if File_ryzesca_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ryzesca_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RyzescaParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ryzesca_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RyzescaResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ryzesca_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ryzesca_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ryzesca_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageVulerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ryzesca_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVEInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ryzesca_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ryzesca_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVEInfo_CVEReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ryzesca_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVEInfo_CWE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ryzesca_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ryzesca_proto_goTypes,
		DependencyIndexes: file_ryzesca_proto_depIdxs,
		MessageInfos:      file_ryzesca_proto_msgTypes,
	}.Build()
	File_ryzesca_proto = out.File
	file_ryzesca_proto_rawDesc = nil
	file_ryzesca_proto_goTypes = nil
	file_ryzesca_proto_depIdxs = nil
}
