// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc2
// source: ryzesca.proto

package ryzesca

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ryzesca_RunRyzescaCycloneDX_FullMethodName = "/ryzesca.Ryzesca/RunRyzescaCycloneDX"
)

// RyzescaClient is the client API for Ryzesca service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RyzescaClient interface {
	RunRyzescaCycloneDX(ctx context.Context, in *RyzescaParams, opts ...grpc.CallOption) (*RyzescaResult, error)
}

type ryzescaClient struct {
	cc grpc.ClientConnInterface
}

func NewRyzescaClient(cc grpc.ClientConnInterface) RyzescaClient {
	return &ryzescaClient{cc}
}

func (c *ryzescaClient) RunRyzescaCycloneDX(ctx context.Context, in *RyzescaParams, opts ...grpc.CallOption) (*RyzescaResult, error) {
	out := new(RyzescaResult)
	err := c.cc.Invoke(ctx, Ryzesca_RunRyzescaCycloneDX_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RyzescaServer is the server API for Ryzesca service.
// All implementations should embed UnimplementedRyzescaServer
// for forward compatibility
type RyzescaServer interface {
	RunRyzescaCycloneDX(context.Context, *RyzescaParams) (*RyzescaResult, error)
}

// UnimplementedRyzescaServer should be embedded to have forward compatible implementations.
type UnimplementedRyzescaServer struct {
}

func (UnimplementedRyzescaServer) RunRyzescaCycloneDX(context.Context, *RyzescaParams) (*RyzescaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRyzescaCycloneDX not implemented")
}

// UnsafeRyzescaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RyzescaServer will
// result in compilation errors.
type UnsafeRyzescaServer interface {
	mustEmbedUnimplementedRyzescaServer()
}

func RegisterRyzescaServer(s grpc.ServiceRegistrar, srv RyzescaServer) {
	s.RegisterService(&Ryzesca_ServiceDesc, srv)
}

func _Ryzesca_RunRyzescaCycloneDX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RyzescaParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RyzescaServer).RunRyzescaCycloneDX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ryzesca_RunRyzescaCycloneDX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RyzescaServer).RunRyzescaCycloneDX(ctx, req.(*RyzescaParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Ryzesca_ServiceDesc is the grpc.ServiceDesc for Ryzesca service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ryzesca_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ryzesca.Ryzesca",
	HandlerType: (*RyzescaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunRyzescaCycloneDX",
			Handler:    _Ryzesca_RunRyzescaCycloneDX_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ryzesca.proto",
}
